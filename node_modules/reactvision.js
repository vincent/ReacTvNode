var sax = require("./sax.js");  
var ce = require('cloneextends');  

var E_START = 0;
var E_MIDI  = 1;
var E_MAP   = 2;

/**************************************************************************/
if (!Object['values']){
	Object.defineProperty(Object.prototype, 'values', {
	    enumerable: false,
	    value: function(of) {
	    	return Object.keys(of).map(function(key) {
	    	  return of[key];
			});
	    }
	});
}

/**************************************************************************/

//Constructor
function MidiConfigFileParser(config) { }

//properties and methods
MidiConfigFileParser.prototype = {
	run: function(string, config){

		var config = config;
		var parse_state = E_START;
		var result = {};
		var currentMap = {};
		
		this.parser = sax.parser(false);
		
		this.parser.onopentag = function (node) {
			
		  // opened a tag.  node has "name" and "attributes"
		  switch (parse_state) {
		    case E_START:
		    	if (node.name = 'MIDI'){
		    		parse_state = E_MIDI;
		    	}
		    break;
		    case E_MIDI:
		    	if (node.name = 'MAP'){
			    	// we're in a <map>
		    		parse_state = E_MAP;
		
			  	    // extract attributes
		        	node.id = node.attributes['fiducial'];
		        	node.type = node.attributes['type'];
		        	node.icon = config.all_icons[node.type];
		        	node.control = node.attributes['control'] ? node.attributes['control'] : node.attributes['note'];
			    	
		        	// map already in
		        	if (result[node.id]){
		        		result[node.id].types.push(node.type);
		        		result[node.id].icons.push(node.icon);
		        		result[node.id].controls[node.type] = { enabled: true, icon: node.icon, control: node.control, type: node.type };
		
		        	// new map
		        	} else {
		        		//console.log(config.default_types);
		        		var controls = ce.clone(config.default_types);
		        		controls[node.type] = { enabled: true, icon: node.icon, control: node.control, type: node.type };
		        		
		        		result[node.id] = {
		    				id: node.id,
		    				icons: [ node.icon ],
		    				types: [ node.type ],
		    				controls: controls
		        		};
		        	}
			    	// jump back to <midi>
			    	parse_state = E_MIDI;
		    	}
		    break;
		  }
		};

		// parse !
		this.parser.write(string).close();
		
		Object.keys(result).forEach(function(key) {
			result[key].controls = Object.values(result[key].controls);
		});

		return result;
	}
};

//node.js module export
module.exports = {
	MidiConfigFileParser: MidiConfigFileParser
};